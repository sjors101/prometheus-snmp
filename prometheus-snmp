#!/usr/bin/python3
# Author: Sjors101 <https://github.com/sjors101/>, 30/04/2018
from prometheus_client import start_http_server, Gauge
import time
from pysnmp.hlapi import *

# Define when to poll for status in seconds
poller = 10
# Port which the prometheus_client will run
webserverport = 7777
# ServerStats
snmpcommunity = 'public'
snmphost = '127.0.0.1'

# insert key and oid
iodlist = {'ifHCInOctets': '.1.3.6.1.2.1.31.1.1.1.6.2',
           'ifHCOutOctets': '.1.3.6.1.2.1.31.1.1.1.10.2',
           'ifInErrors': '1.3.6.1.2.1.2.2.1.14.2',
           'ifOutErrors': '1.3.6.1.2.1.2.2.1.20.2',
           'ifOperStatus': '1.3.6.1.2.1.2.2.1.8.2',
           'ifAdminStatus': '1.3.6.1.2.1.2.2.1.7.2',
           'ifInDiscards': '1.3.6.1.2.1.2.2.1.13.2'
           }

def getsnmp(oid):
    iterator = getCmd(SnmpEngine(),
                      CommunityData(str(snmpcommunity)),
                      UdpTransportTarget((snmphost, 161)),
                      ContextData(),
                      ObjectType(ObjectIdentity(oid)))

    errorIndication, errorStatus, errorIndex, varBinds = next(iterator)

    if errorIndication:  # SNMP engine errors
        return(errorIndication)
    else:
        if errorStatus:  # SNMP agent errors
            return('%s at %s' % (errorStatus.prettyPrint(), varBinds[int(errorIndex)-1] if errorIndex else '?'))
        else:
            for varBind in varBinds:  # SNMP response contents
                return(' = '.join([x.prettyPrint() for x in varBind]))


if __name__ == '__main__':
    # We need to predifine the gauge's before starting the webserver
    gauge_list = list()
    for object_key, oid in iodlist.items():
        gauge_list.append(Gauge(object_key, 'snmpvalue'))

    # Start up the server to expose the metrics.
    start_http_server(webserverport)

    while True:
        micro_count = 0
        # Looping the services and check them one by one
        for gauge in gauge_list:
            oid_gauge = (list(iodlist.values())[micro_count])
            micro_count += 1
            snmp_result = (getsnmp(oid_gauge))
            # fix format
            snmp_result = (int(snmp_result.split("=", 1)[1]))
            gauge.set(snmp_result)

        # wait before run again
        time.sleep(poller)